using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Seq.App.Opsgenie.Api;
using Seq.App.Opsgenie.Classes;
using Seq.App.Opsgenie.Tests.Support;
using Seq.Apps;
using Seq.Apps.LogEvents;
using Xunit;
using Xunit.Abstractions;

namespace Seq.App.Opsgenie.Tests
{
    public class OpsgenieAppTests
    {
        readonly ITestOutputHelper _testOutputHelper;

        public OpsgenieAppTests(ITestOutputHelper testOutputHelper)
        {
            _testOutputHelper = testOutputHelper;
        }

        [Fact]
        public async Task AppTriggersAlerts()
        {
            var apiClient = new TestOpsgenieApiClient();

            using var app = new OpsgenieApp
            {
                AlertMessage = "Test",
                Tags = "First, Second, Third",
                ApiClient = apiClient
            };

            app.Attach(TestAppHost.Instance);

            var evt = Some.LogEvent();
            await app.OnAsync(evt);

            var alert = Assert.Single(apiClient.CreatedAlerts);
            Assert.Equal("Test", alert!.Message);
            Assert.Equal(evt.Id, alert.Alias);
            Assert.Equal(new[] {"First", "Second", "Third"}, alert.Tags);
        }

        [Fact]
        public void PriorityMappingsCanBeParsed()
        {
            const string input = "Test=P1, Another= p2";
            Assert.True(OpsgenieApp.TryParsePriorityMappings(input, out var mappings));
            Assert.Equal(expected: 2, mappings.Count);
            Assert.Equal(Priority.P1, mappings["test"]);
            Assert.Equal(Priority.P2, mappings["another"]);
        }

        [Fact]
        public void TagsCorrectlyMapped()
        {
            var expectedTagArray = new[] {"Extra", "Tags", "From", "Config", "Test", "Array", "Result"};
            var expectedTagCommaDelimited = new[] {"Extra", "Tags", "From", "Config", "Test", "Comma", "Delimited"};

            using var app = new OpsgenieApp
            {
                ApiClient = new TestOpsgenieApiClient(),
                DefaultPriority = Priority.P2.ToString()
            };

            app.Attach(TestAppHost.Instance);

            var generateMessage = new HandlebarsTemplate(Some.Host(), "{{$Message}}");
            var generateDescription =
                new HandlebarsTemplate(Some.Host(), $"Generated by Seq running at {Some.Host().BaseUri}.");


            // Test with an array of tags
            var evt = Some.LogEvent(
                include: new Dictionary<string, object> {{"Tags", new[] {"Test", "Array", "Result"}}});
            var message = generateMessage.Render(evt);
            var description = generateDescription.Render(evt);
            var priority = app.ComputePriority(evt);
            var tags = OpsgenieApp.ComputeTags(evt, includeTags: true, "Tags",
                new[] {"Extra", "Tags", "From", "Config"});
            var responders = app.ComputeResponders(evt);
            var notification = Guid.NewGuid().ToString("n");

            var alert = OpsgenieAlert(message, evt, description, priority, responders, notification, tags);

            Assert.Equal(expectedTagArray, alert.Tags);
            _testOutputHelper.WriteLine(string.Join(",", alert.Tags));

            // Test with a comma-delimited string of tags
            evt = Some.LogEvent(include: new Dictionary<string, object> {{"Tags", "Test,Comma,Delimited"}});
            tags = OpsgenieApp.ComputeTags(evt, includeTags: true, "Tags", new[] {"Extra", "Tags", "From", "Config"});
            alert = OpsgenieAlert(message, evt, description, priority, responders, notification, tags);
            Assert.Equal(expectedTagCommaDelimited, alert.Tags);
            _testOutputHelper.WriteLine(string.Join(",", alert.Tags));
        }

        static OpsgenieAlert OpsgenieAlert(string message, Event<LogEventData> evt, string description,
            Priority priority, List<Responder> responders,
            string notification, string[] tags)
        {
            var alert = new OpsgenieAlert(
                message,
                evt.Id,
                description,
                priority.ToString(),
                responders,
                new Dictionary<string, string>
                {
                    {"Seq Host Name", "Test host"},
                    {"Seq Host URL", "http://seq"},
                    {"Seq App Instance", "Test instance"},
                    {"Seq App Instance Id", "111"},
                    {"Seq ID", evt.Id},
                    {
                        "Seq URL",
                        !string.IsNullOrEmpty(evt.Id)
                            ? string.Concat("https://seq", "#/events?filter=@Id%20%3D%20'", evt.Id,
                                "'&amp;show=expanded")
                            : ""
                    },
                    {"Seq Timestamp UTC", evt.TimestampUtc.ToString("O")},
                    {"Seq Event Type", evt.EventType.ToString()},
                    {"Seq Notification Id", notification}
                },
                "https://seq",
                tags);
            return alert;
        }

        [Fact]
        public void TryGetPropertyValueCIMatchesCaseInsensitivePropertyNames()
        {
            var expected = new { };
            var properties = new Dictionary<string, object>
            {
                ["A"] = expected,
                ["b"] = new { },
                ["Tags"] = "Test,Comma,Delimited"
            };

            Assert.True(OpsgenieApp.TryGetPropertyValueCI(properties, "A", out var actual));
            Assert.Equal(expected, actual);

            Assert.True(OpsgenieApp.TryGetPropertyValueCI(properties, "a", out actual));
            Assert.Equal(expected, actual);

            Assert.False(OpsgenieApp.TryGetPropertyValueCI(properties, "C", out _));
        }

        [Theory]
        [InlineData(LogEventLevel.Debug, Priority.P1)]
        [InlineData(LogEventLevel.Warning, Priority.P3)]
        [InlineData(LogEventLevel.Error, Priority.P2)]
        public void WhenLevelMappingIsSpecifiedPriorityIsComputed(LogEventLevel level, Priority expectedPriority)
        {
            using var app = new OpsgenieApp
            {
                ApiClient = new TestOpsgenieApiClient(),
                DefaultPriority = Priority.P2.ToString(),
                PriorityProperty = "@Level",
                EventPriority = "Warning=P3,Debug=P1"
            };

            app.Attach(TestAppHost.Instance);

            var evt = Some.LogEvent(level: level);
            var priority = app.ComputePriority(evt);

            Assert.Equal(expectedPriority, priority);
        }

        [Theory]
        [InlineData("A", Priority.P1)]
        [InlineData("B", Priority.P3)]
        [InlineData("C", Priority.P2)]
        [InlineData(null, Priority.P2)]
        [InlineData(5, Priority.P2)]
        public void WhenValueMappingIsSpecifiedPriorityIsComputed(object value, Priority expectedPriority)
        {
            using var app = new OpsgenieApp
            {
                ApiClient = new TestOpsgenieApiClient(),
                DefaultPriority = Priority.P2.ToString(),
                PriorityProperty = "Test",
                EventPriority = "B=P3,A=P1"
            };

            app.Attach(TestAppHost.Instance);

            var evt = Some.LogEvent(include: new Dictionary<string, object> {["Test"] = value});
            var priority = app.ComputePriority(evt);

            Assert.Equal(expectedPriority, priority);
        }

        [Fact]
        public void WhenMappedPropertyIsMissingPriorityIsDefault()
        {
            using var app = new OpsgenieApp
            {
                ApiClient = new TestOpsgenieApiClient(),
                DefaultPriority = Priority.P2.ToString(),
                PriorityProperty = "Test",
                EventPriority = "B=P3,A=P1"
            };

            app.Attach(TestAppHost.Instance);

            var evt = Some.LogEvent();
            var priority = app.ComputePriority(evt);

            Assert.Equal(Priority.P2, priority);
        }
    }
}